{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport React from \"react\";\nfunction notesAPI(itemName, initialValue) {\n  _s();\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [item, setItem] = useState(initialValue);\n  React.useEffect(() => {\n    fetch('http://example.com/movies.json').then(response => response.json()).then(data => console.log(data));\n\n    // setTimeout(() => {\n    //   try {\n    //     const localStorageItem = localStorage.getItem(itemName);\n    //     let parsedItem;\n\n    //     if (!localStorageItem) {\n    //       localStorage.setItem(itemName, JSON.stringify(initialValue));\n    //       parsedItem = initialValue;\n    //     } else {\n    //       parsedItem = JSON.parse(localStorageItem);\n    //     }\n    //     setItem(parsedItem);\n    //     setLoading(false);\n    //   } catch(error) {\n    //     setError(error);\n    //   }\n    // }, 1000);\n  }, []);\n  const saveItem = newItem => {\n    try {\n      const stringifiedItem = JSON.stringify(newItem);\n      localStorage.setItem(itemName, stringifiedItem);\n      setItem(newItem);\n    } catch (error) {\n      setError(error);\n    }\n  };\n  return {\n    item,\n    saveItem,\n    loading,\n    error\n  };\n}\n_s(notesAPI, \"sd/jOzXoKWa10AnxNJGXHNbuvYQ=\");\nexport { notesAPI };","map":{"version":3,"names":["useState","React","notesAPI","itemName","initialValue","error","setError","loading","setLoading","item","setItem","useEffect","fetch","then","response","json","data","console","log","saveItem","newItem","stringifiedItem","JSON","stringify","localStorage"],"sources":["/Users/martinvillalba/code/meli/challenge/src/NoteContext/notesAPI.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport React from \"react\";\n\nfunction notesAPI(itemName, initialValue){\n  const [error, setError] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [item, setItem] = useState(initialValue);\n\n  React.useEffect(() => {\n    fetch('http://example.com/movies.json')\n      .then((response) => response.json())\n      .then((data) => console.log(data));\n\n\n    // setTimeout(() => {\n    //   try {\n    //     const localStorageItem = localStorage.getItem(itemName);\n    //     let parsedItem;\n\n    //     if (!localStorageItem) {\n    //       localStorage.setItem(itemName, JSON.stringify(initialValue));\n    //       parsedItem = initialValue;\n    //     } else {\n    //       parsedItem = JSON.parse(localStorageItem);\n    //     }\n    //     setItem(parsedItem);\n    //     setLoading(false);\n    //   } catch(error) {\n    //     setError(error);\n    //   }\n    // }, 1000);\n  }, []);\n\n  const saveItem = (newItem) => {\n    try {\n    const stringifiedItem = JSON.stringify(newItem);\n    localStorage.setItem(itemName, stringifiedItem);\n    setItem(newItem);\n    } catch(error) {\n      setError(error);\n    }\n  };\n\n  return {\n    item,\n    saveItem,\n    loading,\n    error\n  };\n}\n\nexport { notesAPI };"],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,OAAOC,KAAK,MAAM,OAAO;AAEzB,SAASC,QAAQ,CAACC,QAAQ,EAAEC,YAAY,EAAC;EAAA;EACvC,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGN,QAAQ,CAAC,KAAK,CAAC;EACzC,MAAM,CAACO,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACS,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAACI,YAAY,CAAC;EAE9CH,KAAK,CAACU,SAAS,CAAC,MAAM;IACpBC,KAAK,CAAC,gCAAgC,CAAC,CACpCC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,EAAE,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAKC,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC,CAAC;;IAGpC;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;EACF,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,QAAQ,GAAIC,OAAO,IAAK;IAC5B,IAAI;MACJ,MAAMC,eAAe,GAAGC,IAAI,CAACC,SAAS,CAACH,OAAO,CAAC;MAC/CI,YAAY,CAACd,OAAO,CAACP,QAAQ,EAAEkB,eAAe,CAAC;MAC/CX,OAAO,CAACU,OAAO,CAAC;IAChB,CAAC,CAAC,OAAMf,KAAK,EAAE;MACbC,QAAQ,CAACD,KAAK,CAAC;IACjB;EACF,CAAC;EAED,OAAO;IACLI,IAAI;IACJU,QAAQ;IACRZ,OAAO;IACPF;EACF,CAAC;AACH;AAAC,GA9CQH,QAAQ;AAgDjB,SAASA,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}